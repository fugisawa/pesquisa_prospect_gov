#!/usr/bin/env python3
"""
AN√ÅLISE DE SUBSTITUTOS: EAD GEN√âRICO ‚Üí IDIOMAS
Identifica √≥rg√£os com potencial de migra√ß√£o de solu√ß√µes gen√©ricas para especializadas em idiomas
"""

import pandas as pd
import numpy as np
import json
from datetime import datetime
import re

class SubstituteAnalyzer:
    def __init__(self):
        self.edtech_data = None
        self.idiomas_data = None
        self.merged_data = None

    def load_data(self):
        """Carrega dados dos radares EdTech e Idiomas"""
        print("üîÑ Carregando dados...")

        # Carregar dados EdTech
        try:
            self.edtech_data = pd.read_csv('/home/danielfugisawa/pesquisa_prospect_gov/outputs/radar_edtech.csv')
            print(f"‚úÖ EdTech data: {len(self.edtech_data)} registros")
        except Exception as e:
            print(f"‚ùå Erro ao carregar dados EdTech: {e}")

        # Carregar dados Idiomas
        try:
            self.idiomas_data = pd.read_csv('/home/danielfugisawa/pesquisa_prospect_gov/outputs/radar_idiomas.csv')
            print(f"‚úÖ Idiomas data: {len(self.idiomas_data)} registros")
        except Exception as e:
            print(f"‚ùå Erro ao carregar dados Idiomas: {e}")

    def clean_currency(self, value):
        """Limpa valores monet√°rios"""
        if pd.isna(value):
            return 0
        if isinstance(value, str):
            # Remove R$, pontos e v√≠rgulas, converte para float
            clean_value = re.sub(r'[R$\s\.]', '', value)
            clean_value = clean_value.replace(',', '.')
            try:
                return float(clean_value)
            except:
                return 0
        return float(value)

    def analyze_edtech_patterns(self):
        """Analisa padr√µes de compra de EAD gen√©rico"""
        print("\nüìä AN√ÅLISE DE PADR√ïES EAD GEN√âRICO")
        print("=" * 50)

        if self.edtech_data is None:
            print("‚ùå Dados EdTech n√£o carregados")
            return

        # Limpar valores monet√°rios
        self.edtech_data['valor_numerico'] = self.edtech_data['valor'].apply(self.clean_currency)

        # An√°lise por √≥rg√£o
        orgao_stats = self.edtech_data.groupby('orgao').agg({
            'valor_numerico': ['sum', 'count', 'mean'],
            'fornecedor': 'nunique'
        }).round(2)

        orgao_stats.columns = ['Total_Gasto', 'Num_Contratos', 'Media_Contrato', 'Num_Fornecedores']
        orgao_stats = orgao_stats.sort_values('Total_Gasto', ascending=False)

        print("\nüèõÔ∏è TOP √ìRG√ÉOS EM EAD GEN√âRICO:")
        print(orgao_stats.head(10))

        # Identificar √≥rg√£os com alto potencial (> R$ 500K)
        high_potential = orgao_stats[orgao_stats['Total_Gasto'] > 500000]
        print(f"\nüéØ √ìRG√ÉOS COM INVESTIMENTO > R$ 500K: {len(high_potential)}")

        return orgao_stats, high_potential

    def identify_language_gaps(self):
        """Identifica √≥rg√£os que fazem EAD mas n√£o t√™m idiomas"""
        print("\nüîç IDENTIFICANDO GAPS DE IDIOMAS")
        print("=" * 50)

        if self.edtech_data is None or self.idiomas_data is None:
            print("‚ùå Dados incompletos")
            return

        # √ìrg√£os com EAD
        edtech_orgaos = set(self.edtech_data['orgao'].unique())
        print(f"üìö √ìrg√£os com EAD gen√©rico: {len(edtech_orgaos)}")

        # √ìrg√£os com idiomas
        idiomas_orgaos = set(self.idiomas_data['orgao'].unique())
        print(f"üó£Ô∏è √ìrg√£os com solu√ß√µes de idiomas: {len(idiomas_orgaos)}")

        # GAP: tem EAD mas n√£o tem idiomas
        gap_orgaos = edtech_orgaos - idiomas_orgaos
        print(f"üéØ √ìRG√ÉOS COM GAP (EAD sim, idiomas n√£o): {len(gap_orgaos)}")

        print("\nüìã LISTA DE √ìRG√ÉOS COM GAP:")
        for i, orgao in enumerate(sorted(gap_orgaos), 1):
            print(f"{i}. {orgao}")

        return gap_orgaos

    def calculate_mission_need_score(self, orgao):
        """Calcula score de necessidade missional de idiomas (0-5)"""

        # Mapeamento de necessidades por tipo de √≥rg√£o
        high_need_keywords = [
            'rela√ß√µes exteriores', 'exterior', 'rela√ß√µes internacionais',
            'defesa', 'militar', 'aeron√°utica', 'marinha', 'ex√©rcito',
            'turismo', 'desenvolvimento', 'com√©rcio exterior',
            'ci√™ncia', 'tecnologia', 'universidade', 'pesquisa'
        ]

        medium_need_keywords = [
            'justi√ßa', 'seguran√ßa', 'receita', 'fazenda',
            'educa√ß√£o', 'sa√∫de', 'agricultura',
            'trabalho', 'previd√™ncia'
        ]

        orgao_lower = orgao.lower()

        # Score alto (4-5) para √≥rg√£os com alta necessidade internacional
        for keyword in high_need_keywords:
            if keyword in orgao_lower:
                if any(international in orgao_lower for international in ['exterior', 'internacional', 'defesa']):
                    return 5
                return 4

        # Score m√©dio (2-3) para √≥rg√£os com necessidade moderada
        for keyword in medium_need_keywords:
            if keyword in orgao_lower:
                return 3

        # Score baixo (1-2) para outros √≥rg√£os
        if any(admin in orgao_lower for admin in ['administra√ß√£o', 'gest√£o', 'enap']):
            return 2

        return 1

    def calculate_migration_ease_score(self, total_gasto, num_contratos):
        """Calcula facilidade de migra√ß√£o (0-5)"""

        # Baseado no volume de gastos e n√∫mero de contratos
        if total_gasto > 2000000:  # > R$ 2M
            if num_contratos >= 3:
                return 5  # Alto volume, m√∫ltiplos contratos = f√°cil migra√ß√£o
            else:
                return 4  # Alto volume, poucos contratos = migra√ß√£o moderada
        elif total_gasto > 1000000:  # > R$ 1M
            return 3  # Volume m√©dio
        elif total_gasto > 500000:  # > R$ 500K
            return 2  # Volume baixo mas vi√°vel
        else:
            return 1  # Volume muito baixo

    def determine_timeline(self, mission_score, ease_score, total_gasto):
        """Determina timeline prov√°vel de migra√ß√£o"""

        combined_score = (mission_score + ease_score) / 2

        if combined_score >= 4 and total_gasto > 1000000:
            return "Q1 2025"
        elif combined_score >= 3.5:
            return "Q2 2025"
        elif combined_score >= 2.5:
            return "Q3 2025"
        else:
            return "Q4 2025"

    def create_substitute_analysis(self):
        """Cria an√°lise completa de substitutos"""
        print("\nüéØ CRIANDO AN√ÅLISE DE SUBSTITUTOS")
        print("=" * 50)

        # Carregar dados
        self.load_data()

        # Analisar padr√µes EdTech
        orgao_stats, high_potential = self.analyze_edtech_patterns()

        # Identificar gaps
        gap_orgaos = self.identify_language_gaps()

        # Criar an√°lise de substitutos
        substitute_candidates = []

        for orgao in gap_orgaos:
            if orgao in orgao_stats.index:
                stats = orgao_stats.loc[orgao]

                mission_score = self.calculate_mission_need_score(orgao)
                ease_score = self.calculate_migration_ease_score(
                    stats['Total_Gasto'],
                    stats['Num_Contratos']
                )
                timeline = self.determine_timeline(
                    mission_score,
                    ease_score,
                    stats['Total_Gasto']
                )

                # Score total (m√©dia ponderada)
                total_score = (mission_score * 0.4 + ease_score * 0.6)

                substitute_candidates.append({
                    'orgao': orgao,
                    'total_gasto_edtech': stats['Total_Gasto'],
                    'num_contratos_edtech': stats['Num_Contratos'],
                    'media_contrato': stats['Media_Contrato'],
                    'necessidade_missional_score': mission_score,
                    'facilidade_migracao_score': ease_score,
                    'score_total': round(total_score, 2),
                    'timeline_provavel': timeline,
                    'potencial_mercado_r$': round(stats['Total_Gasto'] * 0.3, 2)  # 30% do gasto atual
                })

        # Converter para DataFrame e ordenar por score
        substitute_df = pd.DataFrame(substitute_candidates)
        substitute_df = substitute_df.sort_values('score_total', ascending=False)

        return substitute_df

    def generate_migration_matrix(self, substitute_df):
        """Gera matriz de migra√ß√£o atual vs potencial"""
        print("\nüìä MATRIZ DE MIGRA√á√ÉO")
        print("=" * 30)

        # Agrupar por timeline
        timeline_groups = substitute_df.groupby('timeline_provavel').agg({
            'orgao': 'count',
            'total_gasto_edtech': 'sum',
            'potencial_mercado_r$': 'sum'
        }).round(2)

        timeline_groups.columns = ['Num_Orgaos', 'Mercado_Atual_EAD', 'Potencial_Idiomas']

        print(timeline_groups)

        return timeline_groups

    def calculate_total_market(self, substitute_df):
        """Calcula mercado total de substitui√ß√£o"""
        print("\nüí∞ MERCADO TOTAL DE SUBSTITUI√á√ÉO")
        print("=" * 40)

        total_current = substitute_df['total_gasto_edtech'].sum()
        total_potential = substitute_df['potencial_mercado_r$'].sum()

        print(f"üîÑ Mercado atual EAD gen√©rico: R$ {total_current:,.2f}")
        print(f"üéØ Potencial mercado idiomas: R$ {total_potential:,.2f}")
        print(f"üìà Taxa de penetra√ß√£o estimada: {(total_potential/total_current)*100:.1f}%")

        return total_current, total_potential

    def generate_value_propositions(self, substitute_df):
        """Gera proposi√ß√µes de valor espec√≠ficas"""
        print("\nüí° VALUE PROPOSITIONS ESPEC√çFICAS")
        print("=" * 40)

        value_props = {}

        for _, row in substitute_df.head(10).iterrows():  # Top 10
            orgao = row['orgao']
            mission_score = row['necessidade_missional_score']

            if mission_score >= 4:
                if 'rela√ß√µes exteriores' in orgao.lower() or 'exterior' in orgao.lower():
                    value_prop = "Capacita√ß√£o diplom√°tica especializada com certifica√ß√£o internacional"
                elif 'defesa' in orgao.lower() or 'militar' in orgao.lower():
                    value_prop = "Treinamento militar multil√≠ngue para opera√ß√µes internacionais"
                elif 'universidade' in orgao.lower() or 'pesquisa' in orgao.lower():
                    value_prop = "Ingl√™s acad√™mico para publica√ß√µes e coopera√ß√£o internacional"
                else:
                    value_prop = "Capacita√ß√£o internacional especializada para servidores"
            elif mission_score >= 3:
                value_prop = "Moderniza√ß√£o da capacita√ß√£o com foco em comunica√ß√£o global"
            else:
                value_prop = "Evolu√ß√£o natural do EAD para compet√™ncias lingu√≠sticas"

            value_props[orgao] = value_prop

        return value_props

    def save_results(self, substitute_df, timeline_matrix, value_props):
        """Salva resultados da an√°lise"""
        print("\nüíæ SALVANDO RESULTADOS")
        print("=" * 25)

        # Salvar tabela principal
        substitute_df.to_csv('/home/danielfugisawa/pesquisa_prospect_gov/analysis/mapa_substitutos_edtech_idiomas.csv', index=False)
        print("‚úÖ Tabela principal salva")

        # Salvar matriz de timeline
        timeline_matrix.to_csv('/home/danielfugisawa/pesquisa_prospect_gov/analysis/matriz_migracao_timeline.csv')
        print("‚úÖ Matriz de migra√ß√£o salva")

        # Salvar value propositions
        with open('/home/danielfugisawa/pesquisa_prospect_gov/analysis/value_propositions.json', 'w', encoding='utf-8') as f:
            json.dump(value_props, f, ensure_ascii=False, indent=2)
        print("‚úÖ Value propositions salvas")

        # Criar relat√≥rio executivo
        self.create_executive_report(substitute_df, timeline_matrix)

    def create_executive_report(self, substitute_df, timeline_matrix):
        """Cria relat√≥rio executivo"""

        total_current, total_potential = self.calculate_total_market(substitute_df)

        report = f"""
# MAPA DE SUBSTITUTOS: EAD GEN√âRICO ‚Üí IDIOMAS
## Relat√≥rio Executivo - {datetime.now().strftime('%Y-%m-%d')}

### üìä RESUMO EXECUTIVO

**OPORTUNIDADE IDENTIFICADA:**
- {len(substitute_df)} √≥rg√£os com EAD gen√©rico sem solu√ß√µes de idiomas
- Mercado atual EAD: R$ {total_current:,.2f}
- Potencial mercado idiomas: R$ {total_potential:,.2f}
- Taxa de penetra√ß√£o estimada: {(total_potential/total_current)*100:.1f}%

### üéØ TOP 10 PROSPECTS (Low-Hanging Fruits)

| √ìrg√£o | Score | Gasto EAD | Potencial | Timeline |
|-------|-------|-----------|-----------|----------|
"""

        for _, row in substitute_df.head(10).iterrows():
            report += f"| {row['orgao'][:50]}... | {row['score_total']:.1f} | R$ {row['total_gasto_edtech']:,.0f} | R$ {row['potencial_mercado_r$']:,.0f} | {row['timeline_provavel']} |\n"

        report += f"""

### üìà ROADMAP DE CONVERS√ÉO

| Timeline | √ìrg√£os | Mercado Atual | Potencial |
|----------|--------|---------------|-----------|
"""

        for timeline, data in timeline_matrix.iterrows():
            report += f"| {timeline} | {data['Num_Orgaos']} | R$ {data['Mercado_Atual_EAD']:,.0f} | R$ {data['Potencial_Idiomas']:,.0f} |\n"

        report += """

### üéØ ESTRAT√âGIA DE ABORDAGEM

**Q1 2025 - A√ß√£o Imediata:**
- Foco nos √≥rg√£os com score > 4.0
- Priorizar Minist√©rios com necessidade internacional
- Proposta de migra√ß√£o gradual (piloto + expans√£o)

**Q2-Q3 2025 - Expans√£o:**
- √ìrg√£os com score 3.0-4.0
- Casos de sucesso como refer√™ncia
- Modelo de ROI comprovado

**Q4 2025 - Consolida√ß√£o:**
- √ìrg√£os restantes com score < 3.0
- Oferta padronizada baseada em aprendizados

### üí° VALUE PROPOSITIONS CHAVE

1. **Evolu√ß√£o Natural:** "Pr√≥ximo passo da sua jornada digital educacional"
2. **ROI Comprovado:** "Investimento existente + especializa√ß√£o = maior impacto"
3. **Necessidade Missional:** "Capacita√ß√£o alinhada aos objetivos estrat√©gicos"
4. **Facilidade de Migra√ß√£o:** "Transi√ß√£o suave baseada na experi√™ncia EAD atual"

### üìû PR√ìXIMOS PASSOS

1. **Valida√ß√£o:** Confirmar dados com prospec√ß√£o ativa
2. **Prioriza√ß√£o:** Ranking por facilidade de convers√£o
3. **Customiza√ß√£o:** Proposta espec√≠fica por √≥rg√£o
4. **Execu√ß√£o:** Plano de abordagem coordenado

---
*An√°lise gerada automaticamente baseada em dados de contratos p√∫blicos 2023*
"""

        with open('/home/danielfugisawa/pesquisa_prospect_gov/analysis/relatorio_executivo_substitutos.md', 'w', encoding='utf-8') as f:
            f.write(report)

        print("‚úÖ Relat√≥rio executivo criado")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ AN√ÅLISE DE SUBSTITUTOS: EAD GEN√âRICO ‚Üí IDIOMAS")
    print("=" * 60)

    analyzer = SubstituteAnalyzer()

    # Executar an√°lise completa
    substitute_df = analyzer.create_substitute_analysis()

    if substitute_df is not None and len(substitute_df) > 0:
        print(f"\nüéØ ENCONTRADOS {len(substitute_df)} CANDIDATOS A SUBSTITUI√á√ÉO")

        # Gerar matriz de migra√ß√£o
        timeline_matrix = analyzer.generate_migration_matrix(substitute_df)

        # Calcular mercado total
        analyzer.calculate_total_market(substitute_df)

        # Gerar value propositions
        value_props = analyzer.generate_value_propositions(substitute_df)

        # Salvar resultados
        analyzer.save_results(substitute_df, timeline_matrix, value_props)

        print("\n‚úÖ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
        print("üìÅ Resultados salvos em /home/danielfugisawa/pesquisa_prospect_gov/analysis/")

    else:
        print("‚ùå Nenhum candidato identificado ou erro na an√°lise")

if __name__ == "__main__":
    main()