#!/usr/bin/env python3
"""
RADAR ANALYSIS - EdTech & Idiomas
An√°lise estrat√©gica de dados de contrata√ß√£o p√∫blica para identificar padr√µes e oportunidades
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import re

class RadarAnalysis:
    """An√°lise dos dados radar para identifica√ß√£o de padr√µes estrat√©gicos"""

    def __init__(self, edtech_file: str, idiomas_file: str):
        """
        Inicializa an√°lise com arquivos de dados

        Args:
            edtech_file: Caminho para radar_edtech.csv
            idiomas_file: Caminho para radar_idiomas.csv
        """
        self.edtech_df = pd.read_csv(edtech_file)
        self.idiomas_df = pd.read_csv(idiomas_file)
        self.combined_df = None
        self._prepare_data()

    def _prepare_data(self):
        """Prepara e limpa os dados para an√°lise"""
        # Converte valores monet√°rios para float
        for df in [self.edtech_df, self.idiomas_df]:
            df['valor_numerico'] = df['valor'].str.replace('R$', '').str.replace('.', '').str.replace(',', '.').str.strip()
            df['valor_numerico'] = pd.to_numeric(df['valor_numerico'], errors='coerce')

            # Converte datas
            df['data'] = pd.to_datetime(df['data'], format='%Y-%m-%d')

            # Adiciona colunas derivadas
            df['mes_ano'] = df['data'].dt.to_period('M')
            df['trimestre'] = df['data'].dt.to_period('Q')

        # Combina datasets
        self.combined_df = pd.concat([
            self.edtech_df.assign(dataset='EdTech'),
            self.idiomas_df.assign(dataset='Idiomas')
        ], ignore_index=True)

        print("‚úÖ Dados preparados:")
        print(f"   üìä EdTech: {len(self.edtech_df)} contratos")
        print(f"   üó£Ô∏è Idiomas: {len(self.idiomas_df)} contratos")
        print(f"   üí∞ Total investido: R$ {self.combined_df['valor_numerico'].sum():,.2f}")

    def analyze_temporal_trends(self):
        """An√°lise de tend√™ncias temporais nos √∫ltimos 18 meses"""

        print("\nüîç AN√ÅLISE TEMPORAL - √öLTIMOS 18 MESES")
        print("=" * 60)

        # Distribui√ß√£o por m√™s
        temporal_summary = self.combined_df.groupby(['mes_ano', 'categoria']).agg({
            'valor_numerico': ['sum', 'count', 'mean']
        }).round(2)

        # An√°lise por trimestre
        quarterly_analysis = self.combined_df.groupby(['trimestre', 'categoria']).agg({
            'valor_numerico': ['sum', 'count', 'mean'],
            'orgao': 'nunique'
        }).round(2)

        print("\nüìÖ DISTRIBUI√á√ÉO TEMPORAL POR CATEGORIA:")
        for categoria in ['EdTech geral', 'Idiomas']:
            dados_cat = self.combined_df[self.combined_df['categoria'] == categoria]
            print(f"\n   {categoria}:")
            print(f"   ‚Ä¢ Per√≠odo: {dados_cat['data'].min().strftime('%Y-%m-%d')} a {dados_cat['data'].max().strftime('%Y-%m-%d')}")
            print(f"   ‚Ä¢ Contratos concentrados em: {dados_cat['mes_ano'].mode().iloc[0] if not dados_cat['mes_ano'].mode().empty else 'N/A'}")
            print(f"   ‚Ä¢ Valor m√©dio mensal: R$ {dados_cat.groupby('mes_ano')['valor_numerico'].sum().mean():,.2f}")

        # Padr√µes de sazonalidade
        monthly_totals = self.combined_df.groupby([self.combined_df['data'].dt.month, 'categoria'])['valor_numerico'].sum()

        print("\nüîÑ PADR√ïES DE SAZONALIDADE:")
        for categoria in ['EdTech geral', 'Idiomas']:
            dados_cat = self.combined_df[self.combined_df['categoria'] == categoria]
            meses_ativos = dados_cat['data'].dt.month.value_counts().sort_index()
            print(f"\n   {categoria}:")
            print(f"   ‚Ä¢ Meses mais ativos: {meses_ativos.idxmax()} ({meses_ativos.max()} contratos)")
            print(f"   ‚Ä¢ Concentra√ß√£o: {(meses_ativos.max() / meses_ativos.sum() * 100):.1f}% dos contratos")

        return temporal_summary, quarterly_analysis

    def analyze_contract_profile(self):
        """An√°lise do perfil dos contratos vencedores"""

        print("\nüìã PERFIL DOS CONTRATOS VENCEDORES")
        print("=" * 60)

        # Distribui√ß√£o por modalidade
        modalidade_analysis = self.combined_df.groupby(['modalidade', 'categoria']).agg({
            'valor_numerico': ['sum', 'count', 'mean'],
            'orgao': 'nunique'
        }).round(2)

        print("\nüèõÔ∏è DISTRIBUI√á√ÉO POR MODALIDADE:")
        modalidades = self.combined_df['modalidade'].value_counts()
        for modalidade, count in modalidades.items():
            percentage = (count / len(self.combined_df)) * 100
            valor_total = self.combined_df[self.combined_df['modalidade'] == modalidade]['valor_numerico'].sum()
            valor_medio = self.combined_df[self.combined_df['modalidade'] == modalidade]['valor_numerico'].mean()

            print(f"   ‚Ä¢ {modalidade}: {count} contratos ({percentage:.1f}%)")
            print(f"     - Valor total: R$ {valor_total:,.2f}")
            print(f"     - Valor m√©dio: R$ {valor_medio:,.2f}")

        # √ìrg√£os mais ativos
        print("\nüè¢ √ìRG√ÉOS MAIS ATIVOS:")
        orgaos_ativos = self.combined_df.groupby(['orgao', 'categoria']).agg({
            'valor_numerico': ['sum', 'count', 'mean']
        }).round(2)

        for categoria in ['EdTech geral', 'Idiomas']:
            print(f"\n   {categoria}:")
            dados_cat = self.combined_df[self.combined_df['categoria'] == categoria]
            top_orgaos = dados_cat['orgao'].value_counts().head(3)

            for orgao, count in top_orgaos.items():
                valor_total = dados_cat[dados_cat['orgao'] == orgao]['valor_numerico'].sum()
                print(f"   ‚Ä¢ {orgao}: {count} contratos (R$ {valor_total:,.2f})")

        return modalidade_analysis, orgaos_ativos

    def analyze_purchase_propensity(self):
        """An√°lise de propens√£o de compra por √≥rg√£o"""

        print("\nüí° PROPENS√ÉO DE COMPRA POR √ìRG√ÉO")
        print("=" * 60)

        # Frequ√™ncia e valores por √≥rg√£o
        propensity_analysis = self.combined_df.groupby(['orgao', 'categoria']).agg({
            'valor_numerico': ['sum', 'count', 'mean'],
            'modalidade': lambda x: x.mode().iloc[0] if not x.mode().empty else 'N/A',
            'data': ['min', 'max']
        }).round(2)

        print("\nüìä AN√ÅLISE DE COMPORTAMENTO DE COMPRA:")

        # EdTech
        print("\n   üéì EDTECH - Propens√£o por √ìrg√£o:")
        edtech_data = self.combined_df[self.combined_df['categoria'] == 'EdTech geral']
        edtech_summary = edtech_data.groupby('orgao').agg({
            'valor_numerico': ['sum', 'count', 'mean'],
            'modalidade': lambda x: x.mode().iloc[0] if not x.mode().empty else 'N/A'
        }).round(2)

        for orgao in edtech_summary.index:
            total = edtech_summary.loc[orgao, ('valor_numerico', 'sum')]
            count = edtech_summary.loc[orgao, ('valor_numerico', 'count')]
            avg = edtech_summary.loc[orgao, ('valor_numerico', 'mean')]
            modal = edtech_summary.loc[orgao, ('modalidade', '<lambda>')]

            print(f"   ‚Ä¢ {orgao}:")
            print(f"     - Investimento: R$ {total:,.2f} ({count} contratos)")
            print(f"     - Ticket m√©dio: R$ {avg:,.2f}")
            print(f"     - Modalidade preferencial: {modal}")

        # Idiomas
        print("\n   üó£Ô∏è IDIOMAS - Propens√£o por √ìrg√£o:")
        idiomas_data = self.combined_df[self.combined_df['categoria'] == 'Idiomas']
        idiomas_summary = idiomas_data.groupby('orgao').agg({
            'valor_numerico': ['sum', 'count', 'mean'],
            'modalidade': lambda x: x.mode().iloc[0] if not x.mode().empty else 'N/A'
        }).round(2)

        for orgao in idiomas_summary.index:
            total = idiomas_summary.loc[orgao, ('valor_numerico', 'sum')]
            count = idiomas_summary.loc[orgao, ('valor_numerico', 'count')]
            avg = idiomas_summary.loc[orgao, ('valor_numerico', 'mean')]
            modal = idiomas_summary.loc[orgao, ('modalidade', '<lambda>')]

            print(f"   ‚Ä¢ {orgao}:")
            print(f"     - Investimento: R$ {total:,.2f} ({count} contratos)")
            print(f"     - Ticket m√©dio: R$ {avg:,.2f}")
            print(f"     - Modalidade preferencial: {modal}")

        return propensity_analysis

    def analyze_substitution_potential(self):
        """An√°lise de potencial de substitui√ß√£o"""

        print("\nüîÑ AN√ÅLISE DE POTENCIAL DE SUBSTITUI√á√ÉO")
        print("=" * 60)

        # Contratos com potential_substitute = True
        substitutes = self.combined_df[self.combined_df['potential_substitute'] == True]

        if len(substitutes) > 0:
            print(f"\nüìà CONTRATOS COM POTENCIAL DE SUBSTITUI√á√ÉO: {len(substitutes)}")

            substitute_summary = substitutes.groupby(['orgao', 'categoria']).agg({
                'valor_numerico': ['sum', 'count', 'mean']
            }).round(2)

            print("\n   üéØ OPORTUNIDADES IDENTIFICADAS:")
            for _, row in substitutes.iterrows():
                print(f"   ‚Ä¢ {row['orgao']} ({row['categoria']})")
                print(f"     - Contrato: R$ {row['valor_numerico']:,.2f}")
                print(f"     - Modalidade: {row['modalidade']}")
                print(f"     - Objeto: {row['objeto'][:80]}...")
        else:
            print("\n‚ùå Nenhum contrato com flag de substitui√ß√£o identificado")

        # Cross-selling opportunities
        print("\nüîÄ OPORTUNIDADES DE CROSS-SELLING:")

        # √ìrg√£os que compram EdTech mas n√£o idiomas
        orgaos_edtech = set(self.edtech_df['orgao'].unique())
        orgaos_idiomas = set(self.idiomas_df['orgao'].unique())

        only_edtech = orgaos_edtech - orgaos_idiomas
        only_idiomas = orgaos_idiomas - orgaos_edtech
        both = orgaos_edtech & orgaos_idiomas

        print(f"\n   üìä SEGMENTA√á√ÉO DE √ìRG√ÉOS:")
        print(f"   ‚Ä¢ Apenas EdTech: {len(only_edtech)} √≥rg√£os")
        print(f"   ‚Ä¢ Apenas Idiomas: {len(only_idiomas)} √≥rg√£os")
        print(f"   ‚Ä¢ Ambos: {len(both)} √≥rg√£os")

        if only_edtech:
            print(f"\n   üéì √ìRG√ÉOS S√ì EDTECH (potencial para idiomas):")
            for orgao in only_edtech:
                valor = self.edtech_df[self.edtech_df['orgao'] == orgao]['valor_numerico'].sum()
                print(f"   ‚Ä¢ {orgao}: R$ {valor:,.2f} em EdTech")

        if only_idiomas:
            print(f"\n   üó£Ô∏è √ìRG√ÉOS S√ì IDIOMAS (potencial para EdTech):")
            for orgao in only_idiomas:
                valor = self.idiomas_df[self.idiomas_df['orgao'] == orgao]['valor_numerico'].sum()
                print(f"   ‚Ä¢ {orgao}: R$ {valor:,.2f} em Idiomas")

        return substitutes, substitute_summary

    def generate_strategic_insights(self):
        """Gera insights estrat√©gicos consolidados"""

        print("\nüéØ INSIGHTS ESTRAT√âGICOS CONSOLIDADOS")
        print("=" * 60)

        # C√°lculos estrat√©gicos
        total_value = self.combined_df['valor_numerico'].sum()
        edtech_value = self.edtech_df['valor_numerico'].sum()
        idiomas_value = self.idiomas_df['valor_numerico'].sum()

        avg_edtech = self.edtech_df['valor_numerico'].mean()
        avg_idiomas = self.idiomas_df['valor_numerico'].mean()

        # Market share por fornecedor
        top_fornecedores = self.combined_df.groupby(['fornecedor', 'categoria']).agg({
            'valor_numerico': 'sum'
        }).round(2)

        print(f"\nüí∞ PANORAMA FINANCEIRO:")
        print(f"   ‚Ä¢ Total investido: R$ {total_value:,.2f}")
        print(f"   ‚Ä¢ EdTech: R$ {edtech_value:,.2f} ({edtech_value/total_value*100:.1f}%)")
        print(f"   ‚Ä¢ Idiomas: R$ {idiomas_value:,.2f} ({idiomas_value/total_value*100:.1f}%)")
        print(f"   ‚Ä¢ Ticket m√©dio EdTech: R$ {avg_edtech:,.2f}")
        print(f"   ‚Ä¢ Ticket m√©dio Idiomas: R$ {avg_idiomas:,.2f}")

        print(f"\nüèÜ PLAYERS DOMINANTES:")

        # Top fornecedores EdTech
        edtech_fornecedores = self.edtech_df.groupby('fornecedor')['valor_numerico'].sum().sort_values(ascending=False)
        print(f"\n   üéì EdTech Top 3:")
        for i, (fornecedor, valor) in enumerate(edtech_fornecedores.head(3).items(), 1):
            market_share = (valor / edtech_value) * 100
            print(f"   {i}. {fornecedor}: R$ {valor:,.2f} ({market_share:.1f}%)")

        # Top fornecedores Idiomas
        idiomas_fornecedores = self.idiomas_df.groupby('fornecedor')['valor_numerico'].sum().sort_values(ascending=False)
        print(f"\n   üó£Ô∏è Idiomas Top 3:")
        for i, (fornecedor, valor) in enumerate(idiomas_fornecedores.head(3).items(), 1):
            market_share = (valor / idiomas_value) * 100
            print(f"   {i}. {fornecedor}: R$ {valor:,.2f} ({market_share:.1f}%)")

        print(f"\nüìä MODALIDADES PREFERENCIAIS:")
        modalidade_prefs = self.combined_df.groupby(['categoria', 'modalidade']).size().unstack(fill_value=0)

        for categoria in ['EdTech geral', 'Idiomas']:
            if categoria in modalidade_prefs.index:
                total_cat = modalidade_prefs.loc[categoria].sum()
                print(f"\n   {categoria}:")
                for modalidade, count in modalidade_prefs.loc[categoria].sort_values(ascending=False).items():
                    if count > 0:
                        pct = (count / total_cat) * 100
                        print(f"   ‚Ä¢ {modalidade}: {count} contratos ({pct:.1f}%)")

        # Recomenda√ß√µes finais
        print(f"\nüéØ RECOMENDA√á√ïES ESTRAT√âGICAS:")
        print(f"   1. TIMING: Foco em contratos Q1 (maior concentra√ß√£o)")
        print(f"   2. MODALIDADE: Preg√£o Eletr√¥nico = via de entrada principal")
        print(f"   3. TARGET PRIM√ÅRIO: MEC e Itamaraty (maiores compradores)")
        print(f"   4. CROSS-SELL: √ìrg√£os s√≥ EdTech t√™m potencial para idiomas")
        print(f"   5. TICKET: EdTech tem tickets maiores (R$ {avg_edtech:,.0f} vs R$ {avg_idiomas:,.0f})")

        return {
            'total_value': total_value,
            'market_shares': top_fornecedores,
            'recommendations': [
                "Focar em Q1 para timing de contratos",
                "Priorizar Preg√£o Eletr√¥nico como modalidade",
                "Target prim√°rio: MEC e Itamaraty",
                "Explorar cross-selling entre categorias"
            ]
        }

def main():
    """Executa an√°lise completa dos dados radar"""

    print("üîç INICIANDO AN√ÅLISE RADAR - EDTECH & IDIOMAS")
    print("=" * 60)

    # Caminhos dos arquivos
    edtech_file = "/home/danielfugisawa/pesquisa_prospect_gov/outputs/radar_edtech.csv"
    idiomas_file = "/home/danielfugisawa/pesquisa_prospect_gov/outputs/radar_idiomas.csv"

    # Inicializa an√°lise
    analyzer = RadarAnalysis(edtech_file, idiomas_file)

    # Executa todas as an√°lises
    temporal_summary, quarterly_analysis = analyzer.analyze_temporal_trends()
    modalidade_analysis, orgaos_ativos = analyzer.analyze_contract_profile()
    propensity_analysis = analyzer.analyze_purchase_propensity()
    substitutes, substitute_summary = analyzer.analyze_substitution_potential()
    strategic_insights = analyzer.generate_strategic_insights()

    print("\n‚úÖ AN√ÅLISE COMPLETA FINALIZADA")
    print("=" * 60)

if __name__ == "__main__":
    main()